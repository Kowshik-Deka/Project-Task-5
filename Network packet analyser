from scapy.all import sniff, IP, UDP

def packet_callback(packet):
    # Check if the packet has an IP layer
    if packet.haslayer(IP):
        src_ip = packet[IP].src
        dst_ip = packet[IP].dst
        
        # Determine the protocol name based on the IP protocol number
        # A more comprehensive way would involve a dictionary mapping
        # For simplicity here, we'll check common ones.
        protocol_num = packet[IP].proto
        if protocol_num == 6:
            protocol_name = "TCP"
        elif protocol_num == 17:
            protocol_name = "UDP"
        elif protocol_num == 1:
            protocol_name = "ICMP"
        else:
            protocol_name = f"Other ({protocol_num})" # Display the number for unknown

        print(f"Source IP: {src_ip}")
        print(f"Destination IP: {dst_ip}")
        print(f"Protocol: {protocol_name}")

        # Check for UDP layer and attempt to decode its payload
        if packet.haslayer(UDP):
            # Access the raw payload bytes after the UDP header
            # packet[UDP].payload refers to the next layer (if any),
            # or Raw data. bytes() converts it to bytes.
            udp_payload_raw = bytes(packet[UDP].payload)
            
            try:
                # Try to decode payload as UTF-8, ignore errors for robustness
                payload_decoded = udp_payload_raw.decode('utf-8', errors='ignore').strip()
                # If decoded payload is empty or just whitespace, indicate no readable payload
                if not payload_decoded:
                    print("Payload: <no readable UTF-8 data>")
                else:
                    print(f"Payload: {payload_decoded}")
            except Exception as e:
                # Catch any decoding errors, though errors='ignore' should prevent most
                print(f"Payload: <unable to decode - Error: {e}>")
        else:
            print("Payload: N/A (Not a UDP packet)")
        
        print("-" * 60) # Separator for readability

# Start sniffing UDP packets indefinitely (count=0)
print("Starting packet sniffing for UDP traffic... (Press Ctrl+C to stop)")
sniff(prn=packet_callback, filter="udp", count=0)